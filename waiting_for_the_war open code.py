# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Program\Python\PyQT\Waiting for the war\waiting_for_the_war.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys, requests, time, signal, os, smtplib
from bs4 import BeautifulSoup

from PyQt5 import QtCore, QtGui, QtWidgets, uic, QtTest
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import*
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QThread, Qt


class Functional(QThread):
    def __init__(self, MainWindow, parent=None):
        super().__init__()
        self.ui = MainWindow
        
        self.ui.line_gmail.setPlaceholderText("Ваша почта")
        self.ui.line_password.setPlaceholderText("Ваш App Password")
        
        self.ui.line_gmail_for_get_1.setPlaceholderText("Почта получателя (по дефолту ваша)")
        self.ui.line_gmail_for_get_2.setPlaceholderText("Почта получателя")
        self.ui.line_gmail_for_get_3.setPlaceholderText("Почта получателя")
        self.ui.line_gmail_for_get_4.setPlaceholderText("Почта получателя")
        
        self.ui.line_useragent.setPlaceholderText("User Agent")
        
        self.stop_stream = True
        
        self.started = False
        self.value_gmails = 0
        
        self.LentaRuStart = False; self.LentaUaStart = False; self.TvRainStartRU = False; self.PravdaUA = False; self.KorrespodentNetStart = False
        
    def run(self):
            
        ############################
        # Инициализация информации #
        ############################
        def init_information():
            if self.stop_stream == True:
                print("\n\nПоток остановлен\n")
                while self.stop_stream == True:
                    print('oOoOo', end=' ')
                    time.sleep(5)
            self.headers = {'User-Agent': self.ui.line_useragent.text()} # User Agent
            
            # if self.ui.line_gmail.text() == "": error()
            self.gmail = self.ui.line_gmail.text()
            
            #App Password
            # if self.ui.line_password.text() == "": error()
            self.password = self.ui.line_password.text()
            
            if self.ui.te_keywords.toPlainText() == "": self.keywords = self.DefaultNewsWords
            else: self.keywords = self.ui.te_keywords.toPlainText()
            # self.message = self.ui.line_message.text()
            
            self.NewsWords = self.keywords.split(', ')
            
            if self.ui.comboBox.currentText() == "Проверять украинские и российские СМИ": self.news_kind = 1
            elif self.ui.comboBox.currentText() == "Проверять только российские СМИ": self.news_kind = 2
            elif self.ui.comboBox.currentText() == "Проверять только украинские СМИ": self.news_kind = 3
            
            check()
                
        ###############################
        # Отправка сообщения на почту #
        ###############################
        def gmail_send():
            # try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.ehlo()
            server.starttls()
            server.ehlo()    
            server.login(self.ui.line_gmail.text(), self.ui.line_password.text())
            
            # msg = f"ВОЙНА?!\n\n<b>{self.troblemaker}</b>: {self.text_tm}".encode('utf-8')
            msg = f'Subject: В ожиданиях войны \
            ({self.troblemaker})\r\n\r\n{self.troblemaker}: {self.text_tm}'.encode('utf-8')
            
            if self.value_gmails < 5:
                server.sendmail(self.ui.line_gmail.text(), self.ui.line_gmail_for_get_1.text(), msg.decode('unicode-escape').encode('raw-unicode-escape'))
                if self.ui.checkbox_for_get_2.isChecked() == True: server.sendmail(self.ui.line_gmail.text(), self.ui.line_gmail_for_get_3.text(), msg.decode('unicode-escape').encode('raw-unicode-escape'))
                if self.ui.checkbox_for_get_3.isChecked() == True: server.sendmail(self.ui.line_gmail.text(), self.ui.line_gmail_for_get_4.text(), msg.decode('unicode-escape').encode('raw-unicode-escape'))
                if self.ui.checkbox_for_get_4.isChecked() == True: server.sendmail(self.ui.line_gmail.text(), self.ui.line_gmail_for_get_2.text(), msg.decode('unicode-escape').encode('raw-unicode-escape'))
                
                #print(msg.decode('unicode-escape').encode('raw-unicode-escape'))
                self.value_gmails += 1
                
            print("Письмо отправлено!")
            # except: 
            #     print("\n\nЧто-то пошло не так!\nВозможно вы допустили ошибку в написании почты или неправильно ввели свой App Pasword.")
            #     time.sleep(15)
            
            self.started = True
              
        # Проверка новостных сайтов
        def check():
            self.troblemaker = ''
            self.text_tm = ''
            i = 1
            NWT = ''
            
            self.DefaultNewsWords = ["перешли границу, объявила войну, перешла в наступление, перешла границу, вторглась, началась война, война началась, Украина напала, Россия напала, Началась война, Россия атаковала, Украина атаковала, Началось вторжение" ]
            
            ###############
            # Ввод сайтов #
            ###############
            
            ################################################################################### | Российское СМИ
            # Lenta.ru
            try:
                LINK_lenta_ru = 'https://lenta.ru/'    
                lenta_ru_page = requests.get(LINK_lenta_ru, headers=self.headers)
                lenta_ru_soup = BeautifulSoup(lenta_ru_page.content, 'html.parser')
                lenta_ru_text = lenta_ru_soup.findAll("div", {"class": "card-big__titles"})
                
                print(f"(Lenta.ru) {lenta_ru_text[0].text}")
            except:
                print("(Lenta.ru) Ошибка подключения к сайту! Перезагружаю функцию...")
                time.sleep(2)
                check()
                
            ################################################################################### | Украинское СМИ
            # Lenta.ua
            try:
                LINK_lenta_ua = 'https://lenta.ua/'
                lenta_ua_page = requests.get(LINK_lenta_ua, headers=self.headers)
                lenta_ua_soup = BeautifulSoup(lenta_ua_page.content, 'html.parser')
                lenta_ua_text = lenta_ua_soup.findAll("div", {"class": "text"})

                print(f"(Lenta.ua) {lenta_ua_text[0].text}")
            except:
                print("(Lenta.ua) Ошибка подключения к сайту! Перезагружаю функцию...")
                time.sleep(2)
                check()

            ################################################################################### | Российское (оппозиционное) СМИ
            # Дождь (Tvrain.ru)
            try:
                LINK_tvrain_ru = 'https://tvrain.ru/'
                tvrain_ru_page = requests.get(LINK_tvrain_ru, headers=self.headers)
                tvrain_ru_soup = BeautifulSoup(tvrain_ru_page.content, 'html.parser')
                tvrain_ru_text = tvrain_ru_soup.findAll('a', class_=['article--4x', 'article__info__name'])

                
                # print(tvrain_ru_text)
                print(f"(Дождь) {tvrain_ru_text[0].text}")
            except:
                print("(Дождь) Ошибка подключения к сайту! Перезагружаю функцию...")
                time.sleep(2)
                check()
                
            ################################################################################### | Украинское СМИ
            # Украинская правда (pravda.com.ua) # Нормально не считывает информацию
            # try:
            #     LINK_ukr_pravda_ua = 'https://www.pravda.com.ua/rus/'
            #     ukr_pravda_ua_page = requests.get(LINK_ukr_pravda_ua, headers=self.headers)
            #     ukr_pravda_ua_soup = BeautifulSoup(ukr_pravda_ua_page.content, 'html.parser')
            #     ukr_pravda_ua_text = ukr_pravda_ua_soup.findAll('div', {'class': 'article_header'})
            #     # ukr_pravda_ua_text = ukr_pravda_ua_page.encode('raw-unicode-escape')

                
            #     # print(ukr_pravda_ua_text)
            #     print(ukr_pravda_ua_text[0].text.encode('raw-unicode-escape')) #
            # except:
            #     print("(Украинская правда) Ошибка подключения к сайту! Перезагружаю функцию...")
            #     time.sleep(2)
            #     check()
            
            ################################################################################### | Украинское СМИ
            # Korrespondent.net
            try:
                LINK_korrespondent_net = 'https://korrespondent.net/'
                korrespondent_net_page = requests.get(LINK_korrespondent_net, headers=self.headers)
                korrespondent_net_soup = BeautifulSoup(korrespondent_net_page.content, 'html.parser')
                korrespondent_net_text = korrespondent_net_soup.findAll('div', {'class': 'article__title'})
                # korrespondent_net_text = korrespondent_net_soup.findAll('a', class_='mb10')
                
                print(f"(КорресподенТ.net) {korrespondent_net_text[0].text}")
            except:
                print("(КорресподенТ.net) Ошибка подключения к сайту! Перезагружаю функцию...")
                time.sleep(2)
                check()
            
            
            # Поиск новостей 
            print()
            num = 0
            
            NewsWebsitesTexts = ["lenta_ru_text", "lenta_ua_text", "tvrain_ru_text", "korrespondent_net_text"]
            # Все СМИ
            NewsWebsitesNames = ["Lenta.ru", "Lenta.ua", "Tvrain.ru [Дождь]", "Korrespondent.net [КорреспонденТ.net]"]
            # Российские СМИ
            NewsWebsitesNamesRUS = ["Lenta.ru", "Tvrain.ru [Дождь]"]
            NewsWebsitesTextsRUS = ["lenta_ru_text", "tvrain_ru_text"]
            # Украинские СМИ
            NewsWebsitesNamesUKR = ["Lenta.ua", "Korrespondent.net [КорреспонденТ.net]"]
            
            ########################
            # Поиск по всем сайтам #
            ########################
            if self.news_kind == 1:
                #Цикл сайтов
                for WBN in NewsWebsitesNames:
                    if self.started == False: print(f"! Проверяю {WBN} !")
                    else: 
                        if self.LentaRuStart == True: print(f"!!! На Lenta.ru волнующие новости !!!")
                        if self.LentaUaStart == True: print(f"!!! На Lenta.ua волнующие новости !!!")
                        if self.TvRainStartRU == True: print(f"!!! На Дожде волнующие новости !!!")
                        if self.KorrespodentNetStart == True: print(f"!!! На КорреспонденТ.net волнующие новости !!!")
                        time.sleep(10)
                    
                    #Цикл проверки ключевых слов
                    for NW in self.NewsWords:
                        if NewsWebsitesTexts[num] == "lenta_ru_text":
                            if self.LentaRuStart == False:
                                if NW.lower() in lenta_ru_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Lenta.ru" #название сайта
                                    self.text_tm = lenta_ru_text[0].text #текст блока
                                    self.LentaRuStart = True
                                    gmail_send()
                        elif NewsWebsitesTexts[num] == "lenta_ua_text":
                            if self.LentaUaStart == False:
                                if NW.lower() in lenta_ua_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Lenta.ua" #название сайта
                                    self.text_tm = lenta_ua_text[0].text #текст блока
                                    self.LentaUaStart = True
                                    gmail_send()
                        elif NewsWebsitesTexts[num] == "tvrain_ru_text":
                            if self.TvRainStartRU == False:
                                if NW.lower() in tvrain_ru_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Дождь: " #название сайта
                                    self.text_tm = tvrain_ru_text[0].text #текст блока
                                    self.TvRainStartRU = True
                                    gmail_send()
                        elif NewsWebsitesTexts[num] == "korrespondent_net_text":
                            if self.KorrespodentNetStart == False:
                                if NW.lower() in korrespondent_net_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "КорреспонденТ.net" #название сайта
                                    self.text_tm = korrespondent_net_text[0].text #текст блока
                                    self.KorrespodentNetStart = True
                                    gmail_send()
                                    
                    if self.started == False: print(f"! На {WBN} пусто !")
                    num += 1
            ###################################
            # Проверять только российские СМИ #
            ###################################
            elif self.news_kind == 2:
                for WBN in NewsWebsitesNamesRUS:
                    if self.started == False: print(f"! Проверяю {WBN} !")
                    else: 
                        if self.LentaRuStart == True: print(f"!!! На Lenta.ru волнующие новости !!!")
                        if self.TvRainStartRU == True: print(f"!!! На Дожде волнующие новости !!!")
                        time.sleep(10)
                        
                    for NW in self.NewsWords:
                        if NewsWebsitesTexts[num] == "lenta_ru_text":
                            if self.LentaRuStart == False:
                                if NW.lower() in lenta_ru_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Lenta.ru" #название сайта
                                    self.text_tm = lenta_ru_text[0].text #текст блока
                                    self.LentaRuStart = True
                                    gmail_send()
                        elif NewsWebsitesTexts[num] == "tvrain_ru_text":
                            if self.TvRainStartRU == False:
                                if NW.lower() in tvrain_ru_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Дождь" #название сайта
                                    self.text_tm = tvrain_ru_text[0].text #текст блока
                                    self.TvRainStartRU = True
                                    gmail_send()
                                    
                    if self.started == False: print(f"! На {WBN} пусто !")
                    num += 1
            ###################################
            # Проверять только Украинские СМИ #
            ###################################
            elif self.news_kind == 3:
                for WBN in NewsWebsitesNamesUKR:
                    if self.started == False: print(f"! Проверяю {WBN} !")
                    else:
                        if self.LentaUaStart == True: print(f"!!! На Lenta.ua волнующие новости !!!")
                        if self.KorrespodentNetStart == True: print(f"!!! На КорреспонденТ.net волнующие новости !!!")
                        time.sleep(10)
                        
                    for NW in self.NewsWords:
                        if NewsWebsitesTexts[num] == "lenta_ua_text":
                            if self.LentaUaStart == False:
                                if NW.lower() in lenta_ru_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "Lenta.ua" #название сайта
                                    self.text_tm = lenta_ru_text[0].text #текст блока
                                    self.LentaUaStart = True
                                    gmail_send()
                        elif NewsWebsitesTexts[num] == "korrespondent_net_text":
                            if self.KorrespodentNetStart == False:
                                if NW.lower() in korrespondent_net_text[0].text.lower():
                                    print(f"!!! На {WBN} что-то найдено !!!")
                                    self.troblemaker = "КорресподенТ.net" #название сайта
                                    self.text_tm = korrespondent_net_text[0].text #текст блока
                                    self.KorrespodentNetStart = True
                                    gmail_send()
                                    
                    if self.started == False: print(f"! На {WBN} пусто !")
                    num += 1
    
            # Окончание поиска #
            if self.started == False:
                print("\n! Новостей о начале войны не найдено !\n")
                
                for tick in range(60):
                    if self.stop_stream == True: init_information()
                    print(".", end='')
                    time.sleep(1)
                    if tick == 59: print()
            
                print("\n\n! Начинаю поиск новых новостей !\n")
                check()
            else:
                time.sleep(5)
                print("НАЧАЛОСЬ!?")
                check()
        
        init_information()
            

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 590)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line_gmail = QtWidgets.QLineEdit(self.centralwidget)
        self.line_gmail.setGeometry(QtCore.QRect(50, 30, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.line_gmail.setFont(font)
        self.line_gmail.setStyleSheet("border: 2 solid rgb(0, 0, 0);\n" "border-radius: 20;")
        self.line_gmail.setAlignment(QtCore.Qt.AlignCenter)
        self.line_gmail.setObjectName("line_gmail")
        self.line_password = QtWidgets.QLineEdit(self.centralwidget)
        self.line_password.setGeometry(QtCore.QRect(50, 100, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.line_password.setFont(font)
        self.line_password.setStyleSheet("border: 2 solid rgb(0, 0, 0);\n" "border-radius: 20;")
        self.line_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.line_password.setAlignment(QtCore.Qt.AlignCenter)
        self.line_password.setObjectName("line_password")
        self.line_gmail_for_get_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.line_gmail_for_get_1.setGeometry(QtCore.QRect(50, 190, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.line_gmail_for_get_1.setFont(font)
        self.line_gmail_for_get_1.setStyleSheet("border: 2 solid rgb(103, 103, 103);")
        self.line_gmail_for_get_1.setObjectName("line_gmail_for_get_1")
        self.line_gmail_for_get_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.line_gmail_for_get_2.setGeometry(QtCore.QRect(50, 260, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.line_gmail_for_get_2.setFont(font)
        self.line_gmail_for_get_2.setStyleSheet("border: 2 solid rgb(103, 103, 103);\n" "")
        self.line_gmail_for_get_2.setObjectName("line_gmail_for_get_2")
        self.line_gmail_for_get_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.line_gmail_for_get_3.setGeometry(QtCore.QRect(50, 330, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.line_gmail_for_get_3.setFont(font)
        self.line_gmail_for_get_3.setStyleSheet("border: 2 solid rgb(103, 103, 103);")
        self.line_gmail_for_get_3.setObjectName("line_gmail_for_get_3")
        self.line_gmail_for_get_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.line_gmail_for_get_4.setGeometry(QtCore.QRect(50, 400, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.line_gmail_for_get_4.setFont(font)
        self.line_gmail_for_get_4.setStyleSheet("border: 2 solid rgb(103, 103, 103);")
        self.line_gmail_for_get_4.setObjectName("line_gmail_for_get_4")
        self.frame_for_get = QtWidgets.QFrame(self.centralwidget)
        self.frame_for_get.setGeometry(QtCore.QRect(-1, 189, 51, 261))
        self.frame_for_get.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_for_get.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_for_get.setObjectName("frame_for_get")
        self.checkbox_for_get_1 = QtWidgets.QCheckBox(self.frame_for_get)
        self.checkbox_for_get_1.setChecked(True)
        self.checkbox_for_get_1.setEnabled(False)
        self.checkbox_for_get_1.setGeometry(QtCore.QRect(19, 17, 20, 20))
        self.checkbox_for_get_1.setAcceptDrops(False)
        self.checkbox_for_get_1.setText("")
        self.checkbox_for_get_1.setIconSize(QtCore.QSize(16, 16))
        self.checkbox_for_get_1.setAutoExclusive(False)
        self.checkbox_for_get_1.setTristate(False)
        self.checkbox_for_get_1.setObjectName("checkbox_for_get_1")
        self.checkbox_for_get_2 = QtWidgets.QCheckBox(self.frame_for_get)
        self.checkbox_for_get_2.setEnabled(True)
        self.checkbox_for_get_2.setGeometry(QtCore.QRect(19, 157, 20, 20))
        self.checkbox_for_get_2.setAcceptDrops(False)
        self.checkbox_for_get_2.setText("")
        self.checkbox_for_get_2.setIconSize(QtCore.QSize(16, 16))
        self.checkbox_for_get_2.setAutoExclusive(False)
        self.checkbox_for_get_2.setTristate(False)
        self.checkbox_for_get_2.setObjectName("checkbox_for_get_2")
        self.checkbox_for_get_3 = QtWidgets.QCheckBox(self.frame_for_get)
        self.checkbox_for_get_3.setEnabled(True)
        self.checkbox_for_get_3.setGeometry(QtCore.QRect(19, 227, 20, 20))
        self.checkbox_for_get_3.setAcceptDrops(False)
        self.checkbox_for_get_3.setText("")
        self.checkbox_for_get_3.setIconSize(QtCore.QSize(16, 16))
        self.checkbox_for_get_3.setAutoExclusive(False)
        self.checkbox_for_get_3.setTristate(False)
        self.checkbox_for_get_3.setObjectName("checkbox_for_get_3")
        self.checkbox_for_get_4 = QtWidgets.QCheckBox(self.frame_for_get)
        self.checkbox_for_get_4.setEnabled(True)
        self.checkbox_for_get_4.setGeometry(QtCore.QRect(19, 87, 20, 20))
        self.checkbox_for_get_4.setAcceptDrops(False)
        self.checkbox_for_get_4.setText("")
        self.checkbox_for_get_4.setIconSize(QtCore.QSize(16, 16))
        self.checkbox_for_get_4.setAutoExclusive(False)
        self.checkbox_for_get_4.setTristate(False)
        self.checkbox_for_get_4.setObjectName("checkbox_for_get_4")
        self.btn_test_gmail = QtWidgets.QPushButton(self.centralwidget)
        self.btn_test_gmail.setGeometry(QtCore.QRect(110, 470, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btn_test_gmail.setFont(font)
        self.btn_test_gmail.setStyleSheet("QPushButton:hover { background-color:rgb(110, 110, 110) }\n" "QPushButton:!hover { background-color: rgb(100, 100, 100) }\n" "QPushButton:pressed { background-color: rgb(90, 90, 90); }\n" "QPushButton:disabled { background-color: rgb(168, 168, 168); }\n" "QPushButton { color: rgb(255, 255, 255); }\n")
        self.btn_test_gmail.setObjectName("btn_test_gmail")
        self.line_useragent = QtWidgets.QLineEdit(self.centralwidget)
        self.line_useragent.setGeometry(QtCore.QRect(10, 530, 781, 41))
        self.line_useragent.setStyleSheet("border: 2 solid rgb(0, 0, 0);")
        self.line_useragent.setText("")
        self.line_useragent.setObjectName("line_useragent")
        self.te_keywords = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.te_keywords.setGeometry(QtCore.QRect(380, 30, 401, 201))
        self.te_keywords.setStyleSheet("border: 2 solid rgb(0, 0, 0);")
        self.te_keywords.setObjectName("te_keywords")
        self.label_arr_warn_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_arr_warn_1.setGeometry(QtCore.QRect(380, 230, 291, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.label_arr_warn_1.setFont(font)
        self.label_arr_warn_1.setObjectName("label_arr_warn_1")
        self.label_arr_warn_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_arr_warn_2.setGeometry(QtCore.QRect(380, 240, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.label_arr_warn_2.setFont(font)
        self.label_arr_warn_2.setObjectName("label_arr_warn_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(380, 280, 401, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color: rgb(61, 123, 185);\n" "color: rgb(255, 255, 255);")
        self.comboBox.setInsertPolicy(QtWidgets.QComboBox.InsertAtTop)
        self.comboBox.setIconSize(QtCore.QSize(25, 25))
        self.comboBox.setObjectName("comboBox")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("rus_ukr_flag_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.comboBox.addItem(icon, "")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("rus_flag_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.comboBox.addItem(icon1, "")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("ukr_flag_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.comboBox.addItem(icon2, "")
        font = QtGui.QFont()
        font.setPointSize(7)
        self.label_get_message = QtWidgets.QLabel(self.centralwidget)
        self.label_get_message.setGeometry(QtCore.QRect(50, 170, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.label_get_message.setFont(font)
        self.label_get_message.setObjectName("label_get_message")
        self.label_input_gmail = QtWidgets.QLabel(self.centralwidget)
        self.label_input_gmail.setGeometry(QtCore.QRect(50, 10, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.label_input_gmail.setFont(font)
        self.label_input_gmail.setObjectName("label_input_gmail")
        
        self.label_error = QtWidgets.QLabel(self.centralwidget)
        self.label_error.setGeometry(QtCore.QRect(626, 420, 151, 20))
        self.label_error.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_error.setAlignment(QtCore.Qt.AlignCenter)
        self.label_error.setObjectName("label_error")
        
        self.btn_on = QtWidgets.QPushButton(self.centralwidget)
        self.btn_on.setGeometry(QtCore.QRect(620, 440, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.btn_on.setFont(font)
        self.btn_on.setStyleSheet("QPushButton:hover { background-color:  rgb(95, 180, 137)}\n" "QPushButton:!hover { background-color: rgb(85, 170, 127) }\n" "QPushButton:pressed { background-color: rgb(75, 160, 117); }\n" "QPushButton { color: rgb(255, 255, 255); }\n" "QPushButton:disabled { background-color: rgb(168, 168, 168); }\n")
        self.btn_on.setObjectName("btn_on")
        # self.label_region_warn_2 = QtWidgets.QLabel(self.centralwidget)
        # self.label_region_warn_2.setGeometry(QtCore.QRect(380, 370, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        # self.label_region_warn_2.setFont(font)
        # # self.label_region_warn_2.setObjectName("label_region_warn_2")
        # self.label_message_1 = QtWidgets.QLabel(self.centralwidget)
        # self.label_message_1.setGeometry(QtCore.QRect(380, 390, 101, 21))
        # # self.label_message_1.setObjectName("label_message_1")
        # self.line_message = QtWidgets.QLineEdit(self.centralwidget)
        # self.line_message.setGeometry(QtCore.QRect(490, 390, 231, 21))
        # # self.line_message.setObjectName("line_message")
        # self.label_message_2 = QtWidgets.QLabel(self.centralwidget)
        # self.label_message_2.setGeometry(QtCore.QRect(730, 390, 47, 21))
        # # self.label_message_2.setObjectName("label_message_2")
        self.btn_off = QtWidgets.QPushButton(self.centralwidget)
        self.btn_off.setGeometry(QtCore.QRect(440, 440, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.btn_off.setFont(font)
        self.btn_off.setStyleSheet("QPushButton:hover { background-color: rgb(255, 98, 98) }\n" "QPushButton:!hover { background-color: rgb(255, 83, 83) }\n" "QPushButton:pressed { background-color: rgb(245, 73, 73); }\n" "QPushButton:disabled { background-color: rgb(168, 168, 168); }\n" "QPushButton { color: rgb(255, 255, 255); }\n") #"\n" "\n" "\n" "\n" "\n"
        self.btn_off.setObjectName("btn_off")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.second_stream = Functional(MainWindow=self)
        
        self.btn_off.setEnabled(False)
        self.buttons()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "В ожидании войны"))
        self.btn_test_gmail.setText(_translate("MainWindow", "Тестовая отправка"))
        self.te_keywords.setPlainText(_translate("MainWindow", "перешли границу, объявила войну, перешла в наступление, перешла границу, вторглась, началась война, война началась, Украина напала, Россия напала, Началась война, Россия атаковала, Украина атаковала, Началось вторжение, вторжение, приказ наступать, ультиматум, Донбасс или война, всеобщая мобилизация, Путин умер"))
        self.label_arr_warn_1.setText(_translate("MainWindow", "Не рекомендую изменять или удалять базовые ключевые слова."))
        self.label_arr_warn_2.setText(_translate("MainWindow", "Если вы допустили ошибку в форме, то  изменения не будут работатать!"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Проверять украинские и российские СМИ"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Проверять только российские СМИ"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Проверять только украинские СМИ"))
        self.label_get_message.setText(_translate("MainWindow", "Почты на которые вы хотите получать уведомления"))
        self.label_input_gmail.setText(_translate("MainWindow", "Почта, которая будет отправлять уведомления"))
        self.btn_on.setText(_translate("MainWindow", "ЗАПУСТИТЬ"))
        # self.label_region_warn_2.setText(_translate("MainWindow", "Текст письма"))
        # self.label_message_1.setText(_translate("MainWindow", "[Название ресурса]"))
        # self.line_message.setText(_translate("MainWindow", "опубликовал(а) волнующуюю новость:\\n\\n"))
        # self.label_message_2.setText(_translate("MainWindow", "[новость]"))
        self.btn_off.setText(_translate("MainWindow", "ОТКЛЮЧИТЬ"))
        # self.label_error.setText(_translate("MainWindow", "ТЕСТ"))
        self.label_error.setText(_translate("MainWindow", ""))

    def error(self): self.label_error.setText("Заполните все поля!")
    
    def test_gmail(self):
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.ehlo()
            server.starttls()
            server.ehlo()    
            server.login(self.line_gmail.text(), self.line_password.text())
            
            test_message = "Test".encode('utf-8')
            
            server.sendmail(self.line_gmail.text(), self.line_gmail_for_get_1.text(), test_message)
            if self.checkbox_for_get_2.isChecked() == True: server.sendmail(self.line_gmail.text(), self.line_gmail_for_get_3.text(), test_message)
            if self.checkbox_for_get_3.isChecked() == True: server.sendmail(self.line_gmail.text(), self.line_gmail_for_get_4.text(), test_message)
            if self.checkbox_for_get_4.isChecked() == True: server.sendmail(self.line_gmail.text(), self.line_gmail_for_get_2.text(), test_message)
            
            print("Письмо отправлено!")
        except: print("Что-то пошло не так!\nВозможно вы допустили ошибку в написании почты или неправильно ввели свой App Pasword.")
        
    def start_method(self):
        self.btn_on.setEnabled(False)
        self.btn_off.setEnabled(True)
        self.btn_test_gmail.setEnabled(False)
        print()
        #print(self.line_gmail.text()); print(self.line_gmail_for_get_1.text()); print(self.line_password.text()); print(self.line_useragent.text())
        if self.line_gmail.text() == "" or self.line_gmail_for_get_1.text() == 0 or self.line_password.text() == 0 or self.line_useragent.text() == 0: self.error()
        else: 
            self.second_stream.stop_stream = False
            self.second_stream.start()
        
    def stop_method(self):
        self.btn_on.setEnabled(True)
        self.btn_off.setEnabled(False)
        self.second_stream.stop_stream = True
        
        
    def buttons(self):
        self.btn_on.clicked.connect(self.start_method)
        self.btn_off.clicked.connect(self.stop_method)
        self.btn_test_gmail.clicked.connect(self.test_gmail)



def app():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    
    app.setWindowIcon(QtGui.QIcon('icon.png'))

    window = QtWidgets.QWidget()
    window.setWindowIcon(QtGui.QIcon('icon.png'))
    
    MainWindow.show()
    sys.exit(app.exec_())
    
if __name__ == '__main__': app()